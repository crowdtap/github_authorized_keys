require 'rubygems'
require 'net/https'
require 'json'
require 'yaml'

require "github_authorized_keys/version"

module GithubAuthorizedKeys
  class CLI
    attr_reader :config, :headers

    def run(config_file)
      begin
        load_config(config_file)
        @headers = {'User-Agent' => "#{config['organization']} authorized_keys generator"}

        authorized_keys = [
          '### THIS FILE IS AUTOMATICALLY GENERATED',
        ]
        if config.include?('additional_keys')
          authorized_keys.concat(config['additional_keys'])
        end

        fetch_members.each do |member|
          authorized_keys << "# #{member['login']}"
          fetch_keys(member['login']).each do |ssh_key|
            authorized_keys << ssh_key['key']
          end
        end

        authorized_keys.join('\n')
      rescue Errno::ENOENT
        $stderr.puts "Unable to read configuration file: '#{config_file}'" unless $testing
        read_original_authorized_keys
      rescue
        read_original_authorized_keys
      end
    end

    def github_http_get(url, headers)
      unless @github_http
        github = Net::HTTP.new('api.github.com', 443)
        github.use_ssl = true
        github.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end

      JSON.parse(@github_http.request_get(url, headers).body)
    end

    def fetch_members
      github_http_get("/orgs/#{config['organization']}/members?#{config['oauth_token']}", headers)
    end

    def fetch_keys(login)
      github_http_get("/users/#{login}/keys?#{config['oauth_token']}", headers)
    end

    def load_config(config_file)
      config_file ||= "#{ENV['HOME']}/.github_authorized_keys.yml"
      @config = YAML.load_file(config_file)
    end

    def read_original_authorized_keys
      File.open("#{ENV['HOME']}/.ssh/authorized_keys") do |file|
        while(line = file.gets)
          puts line
        end
      end
    rescue
      '' # file does not exist
    end
  end
end
